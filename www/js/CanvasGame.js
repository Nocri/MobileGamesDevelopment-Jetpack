/*******************************************************************************************************/
/* This file is the same for every game.                                                               */
/* DO NOT EDIT THIS FILE.                                                                              */
/*                                                                                                     */
/* If you need to modify the methods, then you should create a sub-class that extends from this class. */
/*                                                                                                     */
/*******************************************************************************************************/


/* Author: Derek O Reilly, Dundalk Institute of Technology, Ireland.                                                   */
/* The CanvasGame class is responsible for rendering all of the gameObjects and other game graphics on the canvas.         */
/* If you want to implement collision detection in your game, then you MUST overwrite the collisionDetection() method. */

class CanvasGame
{
    constructor()
    {
        /* render the game on the canvas */
        this.playGameLoop();
    }

    start()
    {
        for (let i = 0; i < gameObjects.length; i++)
        {
            gameObjects[i].start();
        }
    }

    playGameLoop()
    {
        this.collisionDetection();
        this.render();
        
        /* recursively call playGameLoop() */
        requestAnimationFrame(this.playGameLoop.bind(this));
    }
    
    render()
    {
        /* clear previous rendering from the canvas */
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        /* render game gameObjects on the canvas */
        for (let i = 0; i < gameObjects.length; i++)
        {
            /* Use an empty gameObject to ensure that there are no empty entries in the gameObjects[] array */
            /* This is needed because an empty entry in the gameObjects[] array will cause the program to freeze */
            if(gameObjects[i] === undefined)
            {
                gameObjects[i] = new GameObject();
            }
            
            if (gameObjects[i].isDisplayed())
            {
                gameObjects[i].render();
            }
        }

        if(!isGameOn){return;}

        ctx.font = "20px Arial";
        ctx.fillStyle = "#FFFFFF"
        ctx.fillText(playerLifes + " Lifes", 10, 50);
        ctx.fillText("Score: " + playerPoints, canvas.width - 300, 50);

        if(isMalfunction){
            ctx.fillText("Jetpack malfunction! ", canvas.width - 100, 50);
        }
    }
    
    collisionDetection()
    {
        let player = gameObjects[3];
        // //console.log(gameObjects);


        // let dx = this.centreX - parseInt(this.sizeX / 2);
        // let dy = this.centreY - parseInt(this.sizeY / 2);

        // ctx.fillRect(dx, dy, this.sizeX, this.sizeY);





        let playerLeftEdge = player.centreX - (player.sizeX / 2);
        let playerRightEdge = playerLeftEdge + player.sizeX;
        let playerTopEdge = player.centreY - (player.sizeY / 2);
        let playerBottomEdge = playerTopEdge + player.sizeY;
        
        for(let i = 3; i < gameObjects.length; i++){
            let object = gameObjects[i];
            let leftEdge = object.centreX - (object.sizeX / 2);
            let rightEdge = leftEdge + object.sizeX;
            let topEdge = object.centreY - (object.sizeY / 2);
            let bottomEdge = topEdge + object.sizeY;

            //console.log(object);
            //ToDo clean this mess, export to methods
            if(
                object.isDisplayed() &&
                (
                    leftEdge > playerLeftEdge && leftEdge < playerRightEdge
                    ||
                    rightEdge > playerLeftEdge && rightEdge < playerRightEdge
                )
                &&
                (
                    topEdge > playerTopEdge && topEdge < playerBottomEdge
                    ||
                    bottomEdge > playerTopEdge && bottomEdge < playerBottomEdge
                )
            ) {
                console.log("Collision!");
                object.onCollision();
            }
        }
        /* If you need to implement collision detection in your game, then you can overwrite this method in your sub-class. */
        /* If you do not need to implement collision detection, then you do not need to overwrite this method.              */
    }
}